{"version":3,"sources":["components/FetchRandomUser.js","components/Header.js","components/EmpList.js","App.js","serviceWorker.js","index.js"],"names":["FetchRandomUser","state","loading","results","fetch","response","json","data","this","setState","className","scope","map","name","picture","dob","email","phone","alt","src","thumbnail","first","last","Moment","date","format","Component","Header","EmpList","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wTAoDeA,E,4MAhDbC,MAAQ,CACNC,SAAS,EACTC,QAAS,I,0LAGG,gD,SACWC,MADX,iD,cACNC,E,gBACaA,EAASC,O,OAAtBC,E,OAENC,KAAKC,SAAS,CAAEN,QAASI,EAAKJ,QAASD,SAAS,I,qIAIhD,OACE,6BACE,6BACE,2BAAOQ,UAAU,uBACf,+BACE,4BACE,wBAAIC,MAAM,OAAV,SACA,wBAAIA,MAAM,OAAV,QACA,wBAAIA,MAAM,OAAV,SACA,wBAAIA,MAAM,OAAV,SACA,wBAAIA,MAAM,OAAV,WAGJ,+BACGH,KAAKP,MAAME,QAAQS,KAClB,gBAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,QAASC,EAAlB,EAAkBA,IAAKC,EAAvB,EAAuBA,MAAOC,EAA9B,EAA8BA,MAA9B,OACE,4BACE,4BACE,yBAAKC,IAAI,UAAUC,IAAKL,EAAQM,aAElC,4BAAKP,EAAKQ,MAAQ,IAAMR,EAAKS,MAC7B,4BAAKN,GACL,4BAAKC,GACL,4BAAKM,IAAOR,EAAIS,MAAMC,OAAO,2B,GArCnBC,aCuBfC,MArBf,WACE,OACE,yBAAKjB,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKA,UAAU,6BACb,yBAAKA,UAAU,aACb,wBAAIA,UAAU,yBAAd,sBACA,wBAAIA,UAAU,eAAd,yFAMJ,kBAAC,IAAD,MACA,8BAEF,kBAAC,EAAD,QCZSkB,E,uKAJX,OAAO,kBAAC,EAAD,U,GAFWF,aCIPG,MAJf,WACE,OAAO,kBAAC,EAAD,OCQWC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.e39ee9cc.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport Moment from \"moment\";\n\nclass FetchRandomUser extends Component {\n  state = {\n    loading: true,\n    results: [],\n  };\n  async componentDidMount() {\n    const url = \"https://randomuser.me/api/?results=200&nat=us\";\n    const response = await fetch(url);\n    const data = await response.json();\n\n    this.setState({ results: data.results, loading: false });\n  }\n\n  render() {\n    return (\n      <div>\n        <div>\n          <table className=\"table table-striped\">\n            <thead>\n              <tr>\n                <th scope=\"col\">Image</th>\n                <th scope=\"col\">Name</th>\n                <th scope=\"col\">Email</th>\n                <th scope=\"col\">Phone</th>\n                <th scope=\"col\">D.O.B</th>\n              </tr>\n            </thead>\n            <tbody>\n              {this.state.results.map(\n                ({ name, picture, dob, email, phone }) => (\n                  <tr>\n                    <td>\n                      <img alt=\"userimg\" src={picture.thumbnail} />\n                    </td>\n                    <td>{name.first + \" \" + name.last}</td>\n                    <td>{email}</td>\n                    <td>{phone}</td>\n                    <td>{Moment(dob.date).format(\"MM/DD/YYYY\")}</td>\n                  </tr>\n                )\n              )}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default FetchRandomUser;\n","import React from \"react\";\nimport \"./Search.css\";\nimport SearchForm from \"./SearchFrom\";\nimport FetchRandomUser from \"./FetchRandomUser\";\n\nfunction Header() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div className=\"jumbotron jumbotron-fluid\">\n          <div className=\"container\">\n            <h1 className=\"display-4 text-center\">Employee Directory</h1>\n            <h6 className=\"text-center\">\n              Click on carrots to filter by heading or use the search box to\n              narrow your results.\n            </h6>\n          </div>\n        </div>\n        <SearchForm />\n        <hr />\n      </header>\n      <FetchRandomUser />\n    </div>\n  );\n}\n\nexport default Header;\n","import React, { Component } from \"react\";\nimport Header from \"./Header\";\n\nclass EmpList extends Component {\n  render() {\n    return <Header />;\n  }\n}\n\nexport default EmpList;\n","import React from \"react\";\nimport EmpList from \"./components/EmpList\";\n\nfunction App() {\n  return <EmpList />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}